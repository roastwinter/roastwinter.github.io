<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HOU</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-11T11:36:41.219Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA</title>
    <link href="http://example.com/2023/09/11/JAVA/"/>
    <id>http://example.com/2023/09/11/JAVA/</id>
    <published>2023-09-11T09:29:29.000Z</published>
    <updated>2023-09-11T11:36:41.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>变量：变量是程序的基本组成单位</p><p>变量的三个基本要素：类型 + 名称 + 值</p><p>示例：<code>int a = 1</code> 类型 int 名称 a 值 1</p></blockquote><p><strong>如何声明变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>, d;</span><br></pre></td></tr></table></figure><h2 id="2-1-变量使用注意事项"><a href="#2-1-变量使用注意事项" class="headerlink" title="2.1 变量使用注意事项"></a>2.1 变量使用注意事项</h2><ol><li><p>变量表示内存中的一个存储区域。不同变量，不同类型，占用的空间大小不同。如 <code>int</code> 有 4 byte，而 <code>double</code> 有 8 byte。</p></li><li><p>该区域有自己的名称 <code>变量名</code> 和类型 <code>数据类型</code></p></li><li><p>变量必须先声明，后使用。</p></li><li><p>变量在同一作用域内不能重名。</p></li><li><p>该区域的数据 · 值可以在同一类型范围内变化。</p></li><li><p>变量的三个基本要素：类型 + 名称 + 值</p></li></ol><h2 id="2-2-程序中-的使用"><a href="#2-2-程序中-的使用" class="headerlink" title="2.2 程序中 + 的使用"></a>2.2 程序中 <code>+</code> 的使用</h2><ol><li><p>当左右两边都是数值型，做加法运算</p></li><li><p>当左右两边任意一方为字符串，做拼接运算</p></li><li><p>运算顺序是从左到右的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">1</span> + <span class="string">&quot;a&quot;</span> + <span class="number">1</span> + <span class="number">1</span>);<span class="comment">// 输出 2a11</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-Java-数据类型"><a href="#2-3-Java-数据类型" class="headerlink" title="2.3 Java 数据类型"></a>2.3 Java 数据类型</h2><h4 id="2-3-1基本数据类型（本章）"><a href="#2-3-1基本数据类型（本章）" class="headerlink" title="2.3.1基本数据类型（本章）"></a>2.3.1基本数据类型（本章）</h4><ul><li><strong>数值型</strong><ul><li>整数类型：<ul><li>byte：占用 1 字节</li><li>short：占用 2 字节</li><li>int：占用 4 字节</li><li>long：占用 8 字节</li></ul></li><li>浮点（小数）类型：<ul><li>float：占用 4 字节</li><li>double：占用 8 字节</li></ul></li></ul></li><li><strong>字符型</strong><ul><li>char：存放单个字符，占用 2 字节</li></ul></li><li><strong>布尔型</strong><ul><li>boolean：存放 true（真），false（假）。占用 1 字节</li></ul></li></ul><h4 id="2-3-2引用数据类型（复合数据类型）"><a href="#2-3-2引用数据类型（复合数据类型）" class="headerlink" title="2.3.2引用数据类型（复合数据类型）"></a>2.3.2引用数据类型（复合数据类型）</h4><ul><li><p><strong>类</strong>：class</p></li><li><p><strong>接口</strong>：interface</p></li><li><p><strong>数组</strong>：<code>[]</code></p></li></ul><h2 id="2-4-整数类型"><a href="#2-4-整数类型" class="headerlink" title="2.4 整数类型"></a>2.4 整数类型</h2><blockquote><p>用于存放整数值</p></blockquote><ul><li><code>byte</code> 占用 1 字节，范围 -128 ~ 127</li><li><code>short</code> 占用 2 字节，范围 -215 ~ 215 - 1</li><li><code>int</code> 占用 4 字节，范围 -231 ~ 231 - 1</li><li><code>long</code> 占用 8 字节，范围 -263 ~ 263 - 1</li></ul><p><strong>使用细节：</strong></p><ol><li>Java 各整数类型有固定的范围和字符长度，不受具体 OS（操作系统）影响，以保证 Java 程序的可移植性。</li><li>Java 默认整型常量为 <code>int</code> ，要声明 <code>long</code> 型常量必须后加 <code>l</code> 或 <code>L</code>。</li><li>从 Java 7 开始，加上前缀 <code>0b</code> 或 <code>0B</code> 就可以写二进制数。</li><li>从 Java 7 开始，可以为数字字面添加下划线。这不会影响数字的值，只是为了方便阅读。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0b0010</span>;</span><br><span class="line">n = <span class="number">0b001</span>;</span><br><span class="line">n = <span class="number">100_0_000000</span>;</span><br><span class="line">n = <span class="number">0B0000_0010_1100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.0F</span>;</span><br></pre></td></tr></table></figure><p>如果基本的整数、浮点类型不能满足范围、精度的需求，可以使用 “大数”</p><h2 id="2-5-浮点类型"><a href="#2-5-浮点类型" class="headerlink" title="2.5 浮点类型"></a>2.5 浮点类型</h2><blockquote><p>可以表示一个小数</p></blockquote><ul><li><code>float</code> 单精度（6 ~ 7 位有效数字），占用 4 字节，范围约 -3.403E38 ~ 3.403E38</li><li><code>double</code> 双精度（15 位有效数字），占用 8 字节，范围约 -1.798E308 ~ 1.798E308</li></ul><p><em>浮点数在机器中存放形式为：浮点数 &#x3D; 符号位 + 指数位 + 尾数位</em></p><p><em><strong>因此，尾数部分可能丢失，造成精度损失。换言之，小数都是近似值</strong></em></p><h3 id="2-5-1-使用细节"><a href="#2-5-1-使用细节" class="headerlink" title="2.5.1 使用细节"></a>2.5.1 使用细节</h3><ol><li><p>与整数类型相似，有固定的范围和字符长度，不受具体 OS（操作系统）影响。</p></li><li><p>Java 默认浮点常量为 <code>double</code> ，要声明 <code>float</code> 型常量必须后加 ”f“ 或 ”F“</p></li><li><p>浮点型常量有两种表示形式</p><blockquote><p>十进制数形式：<code>5.13</code>、<code>315.4F</code>、<code>.414</code></p><p>科学计数法：<code>5.12e2</code> 即[5.12 × 102]、<code>5.12E-2</code> 即[5.12 &#x2F; 102]</p></blockquote></li><li><p>通常情况下，应该使用 <code>double</code> 类型，以其更为精确。</p></li><li><p>浮点数使用陷阱：当我们对运算结果是小数的进行相对判断时，要小心。（因为<em><strong>小数都是近似值</strong></em>）</p><p>正确方法是：<strong>以两个数差值的绝对值，在某个精度范围内判断</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Math.abs(num1 - num2) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;插值范围内认为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特殊的浮点类型常量</p><ul><li><p>正无穷大：<code>Float.POSITIVE_INFINITY</code>、<code>Double.POSITIVE_INFINITY</code></p><p>（浮点数运算中）一个正数除以 0，会得到该值</p></li><li><p>负无穷大：<code>Float.NEGATIVE_INFINITY</code>、<code>Double.NEGATIVE_INFINITY</code></p><p>（浮点数运算中）一个负数除以 0，会得到该值</p></li><li><p>0 &#x2F; 0：<code>Float.NaN</code>、<code>Double.NaN</code></p><p>（浮点数运算中）0 除以 0，会得到该值</p></li><li><p>最大、最小值：<code>Float.MAX_VALUE</code>、<code>Double.MIN_VALUE</code></p></li></ul></li><li><p>不能用运算符来比较特殊值，而要用特别的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0.0</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(num == Double.NaN);<span class="comment">// &lt;——— 始终为 false。不能如此比较</span></span><br><span class="line">System.out.println(Double.isNaN(num));<span class="comment">// &lt;——— 判断是否是 NaN</span></span><br><span class="line">num = <span class="number">1.0</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(Double.isInfinite(num));<span class="comment">// &lt;——— 是否是无穷大</span></span><br></pre></td></tr></table></figure></li><li><p>由于不同处理器寄存浮点数的策略可能不同，浮点数运算的结果也可能不同。</p></li></ol><h2 id="2-6-字符类型"><a href="#2-6-字符类型" class="headerlink" title="2.6 字符类型"></a>2.6 字符类型</h2><blockquote><p>可以表示单个字符。（可以存放一个数字，因为其字符是数字编号的。输出时会输出数字对应的字符。”编码的概念“）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;` `<span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>;` `<span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;字&#x27;</span>;` `<span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">99</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-6-1-使用细节"><a href="#2-6-1-使用细节" class="headerlink" title="2.6.1 使用细节"></a>2.6.1 使用细节</h3><ol><li><p>字符常量用单引号括起 &#96;‘字’</p></li><li><p><code>char</code> 的本质是一个整数，输出时，输出的是 unicode 码对应的字符。[unicode 码查询](<a href="https://i-melody.github.io/2021/11/22/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/2">https://i-melody.github.io/2021/11/22/Java/入门阶段/2</a> 变量&#x2F;tool.chinaz.com&#x2F;Tools&#x2F;Unicode.aspx) 。</p><p>要输出那个整数，用 <code>int</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c1);</span><br></pre></td></tr></table></figure></li><li><p><code>char</code> 是可以进行运算的，其相当于一个整数。<em><strong>注意与 [[2.2 示例]](<a href="https://i-melody.github.io/2021/11/22/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/2">https://i-melody.github.io/2021/11/22/Java/入门阶段/2</a> 变量&#x2F;#2-2-程序中-的使用) 的区别</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注：(int)&#x27;a&#x27; = 97</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;<span class="comment">// 相当于 char c1 = &#x27;b&#x27;</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);<span class="comment">// 这个代码输出 98</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + <span class="number">1</span>);<span class="comment">// 这个代码输出 a1</span></span><br></pre></td></tr></table></figure></li><li><p>字符允许使用转义符（*见 [1.8 Java 转义字符]*）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;\u0041&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>转义序列 \u 能出现在引号外。所有这些转义序列会在解析代码前得到处理</strong></p><ul><li><p>以下字符串是空串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;\u0022+\u0022&quot;</span>;</span><br></pre></td></tr></table></figure><p>因为 \u0022 表示引号。该代码等同于以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>以下注释会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \u000A is a newline</span></span><br></pre></td></tr></table></figure><p>因为 \u000A 是换行符。在解析前会得到处理。在程序看来，上述注释等于以下写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line">is a newlineJAVA</span><br></pre></td></tr></table></figure></li><li><p>以下注释也会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// look inside c:\users</span></span><br></pre></td></tr></table></figure><p>因为程序认为，\users 不是一个合法的转义字符</p></li><li><p>在某些场合下这种写法似乎也能实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>\u005B\u005D a;<span class="comment">// int[] a; 一个数组</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-6-2-字符本质与编码表"><a href="#2-6-2-字符本质与编码表" class="headerlink" title="2.6.2 字符本质与编码表"></a>2.6.2 字符本质与编码表</h3><ul><li><p>字符类型的本质，是把字符对应的码值编程二进制存储。显示时将二进制代码转化为码值，找到对应的字符。</p></li><li><p>字符与码值的对应关系是字符编码表规定的。</p><blockquote><p>ASCII 编码表，占用 1 byte，共有 128 个字符。</p><p>Unicode 编码表，占用 2 byte，字母汉字都占用 2 byte，这样可能浪费空间。0 - 127 的字符与 ASCII 相同，所以兼容 ASCII。</p><p>UTF-8 编码表，根据不同符号大小可变（1 - 6 byte），字母占用 1 byte，汉字占用 3 byte。是 Unicode 的改进，是互联网上使用最广的 Unicode 实现方式。</p><p>GBK 编码表，可以表示汉字，字母占用 1 byte，汉字占用 2 byte。</p><p>GB2312 编码表，可以表示汉字（GB2312 &lt; GBK）</p><p>BIG5 编码表，可以存放繁体中文（香港，台湾）</p></blockquote></li><li><p>UTF-16 编码采用不同长度的编码表示所有 Unicode 码点。包含从 U+0000 到 U+FFFF 的经典 Unicode 代码（16位，1 个代码单元），以及 U+10000 到 U+10FFFF 的辅助字符（32位，2 个代码单元）</p></li><li><p>在 Java 中，char 类型描述的是 UTF-16 编码中的 1 个代码单元。</p><p>字符串中的一个辅助字符（如 🎶）可能占用 2 个代码单元。这个场合，使用 char 可能会导致错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;🎶Melody🎶&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(<span class="number">1</span>);<span class="comment">// &lt;———— 这个场合，c 是 🎶 符号的第二个代码单元而非 &#x27;M&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>因此，一般不建议在程序中使用 char 类型</strong></p></li></ul><h2 id="2-7-布尔类型"><a href="#2-7-布尔类型" class="headerlink" title="2.7 布尔类型"></a>2.7 布尔类型</h2><blockquote><p><code>boolean</code> 只允许取值 <code>ture</code> 或 <code>false</code> ，没有 <code>null</code>。适用于逻辑运算，通常用于程序流程控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>` `<span class="keyword">while</span>` `<span class="keyword">do</span>-<span class="keyword">while</span>` `<span class="keyword">for</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>使用细节：</strong></p><ol><li><p>不可以用 0 或 非0 的整数替代 <code>false</code> 或 <code>ture</code> 。这点和 C语言 不同。</p></li><li><p>不能让布尔类型转换为其他类型。如需转换，请使用如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> b ? <span class="number">0</span> : <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-8-基本数据类型转换"><a href="#2-8-基本数据类型转换" class="headerlink" title="2.8 基本数据类型转换"></a>2.8 基本数据类型转换</h2><h3 id="2-8-1-自动类型转换"><a href="#2-8-1-自动类型转换" class="headerlink" title="2.8.1 自动类型转换"></a>2.8.1 自动类型转换</h3><blockquote><p>自动类型转换：Java 在进行赋值或运算时，精度（容量）小的类型自动转换为精度（容量）大的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>` &gt; `<span class="type">int</span> `&gt; `<span class="type">long</span>` &gt; `<span class="type">float</span>` &gt; `<span class="type">double</span></span><br><span class="line"><span class="type">byte</span>` &gt; `<span class="type">short</span>` &gt; `<span class="type">int</span> `&gt; `<span class="type">long</span>` &gt; `<span class="type">float</span>` &gt; `<span class="type">double</span></span><br></pre></td></tr></table></figure><p>例子：<code>int a = &#39;c&#39;</code> 或者 <code>double b = 80</code></p></blockquote><h4 id="2-8-1-1-使用细节"><a href="#2-8-1-1-使用细节" class="headerlink" title="#2.8.1.1 使用细节"></a>#2.8.1.1 使用细节</h4><ol><li><p>有多种类型数据混合运算时，系统会将所有数据转换成容量最大的那种，再进行运算。</p></li><li><p>如若把大精度（容量）数据赋值给小精度（容量）类型，就会报错（小数由于精度原因，大赋小会丢失精度，必不可用。但整数大赋小时：1.赋予具体数值时，判断范围。2.变量赋值时，判断类型。反之进行自动类型转换。</p></li><li><p><code>byte</code> <code>short</code> <code>char</code> 三者不会相互自动转换，但可以计算。计算时首先转化为 <code>int</code>。</p><blockquote><p><code>byte a = 1;</code></p><p><code>byte b = 1;</code></p><p><code>a + b</code> 结果是 <code>int</code> 类型</p></blockquote></li><li><p><code>boolean</code> 类型不参与自动转换</p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型。</p></li></ol><h3 id="2-8-2-强制类型转换"><a href="#2-8-2-强制类型转换" class="headerlink" title="2.8.2 强制类型转换"></a>2.8.2 强制类型转换</h3><blockquote><p>强制类型转换：自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时加上强制转换符 <code>( )</code> ，但<strong>可能造成精度降低或溢出</strong>，要格外注意。</p></blockquote><h4 id="2-8-2-1-使用细节"><a href="#2-8-2-1-使用细节" class="headerlink" title="#2.8.2.1 使用细节"></a>#2.8.2.1 使用细节</h4><ol><li><p>当进行数据从大到小转换时，用强制转换。</p></li><li><p>强制转换只能对最近的操作数有效，往往会使用 <code>( )</code> 提升优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">3</span> * <span class="number">2.5</span> + <span class="number">1.1</span> * <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>char</code> 可以保留 <code>int</code> 的常量值，但不能保存其变量值。此时需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)a;</span><br></pre></td></tr></table></figure></li><li><p><code>byte</code> <code>short</code> <code>char</code> 在进行运算时，当作 <code>int</code> 处理。</p></li></ol><h3 id="2-8-3-基本数据类型和-String-的转换"><a href="#2-8-3-基本数据类型和-String-的转换" class="headerlink" title="2.8.3 基本数据类型和 String 的转换"></a>2.8.3 基本数据类型和 <code>String</code> 的转换</h3><ul><li><p>基本类型转 <code>String</code>：基本数据类型加上 <code>&quot; &quot;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f2 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2);</span><br></pre></td></tr></table></figure></li><li><p><code>String</code> 转基本数据类型：通过基本数据类型的包装类调用 <code>parseXX</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Interger.parseInt(s);</span><br><span class="line"><span class="type">double</span> <span class="variable">n2</span> <span class="operator">=</span> Double.parseDouble(s);</span><br></pre></td></tr></table></figure><p>特别的，把 <code>String</code> 转换为 <code>char</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>);<span class="comment">// 得到 s 字符串中的第一个字符。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-8-3-1-使用细节"><a href="#2-8-3-1-使用细节" class="headerlink" title="#2.8.3.1 使用细节"></a>#2.8.3.1 使用细节</h4><ol><li>将 <code>String</code> 转成基本数据类型时，要保证其能转换为有效数据。即不能把 <code>&quot;Hello&quot;</code> 转换成 <code>int</code>。</li><li>如果格式不正确，会抛出[异常](<a href="https://i-melody.github.io/2021/12/18/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/11">https://i-melody.github.io/2021/12/18/Java/入门阶段/11</a> 异常&#x2F;)，程序会中止。</li></ol><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><blockquote><p>运算符：一种特殊的符号，用于表示数据的运算、赋值和比较等。</p></blockquote><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><blockquote><p>算术运算符是对数值类型的变量进行运算的运算符，在 Java 程序中使用得非常多。其运算结果是一个数值量。</p></blockquote><ul><li><p><code>+</code> ; <code>-</code> ; <code>*</code> ; <code>/</code> ：加（正）、减（负）、乘、除</p><blockquote><p><code>5 / 2 = 2;</code> 因为是 <code>int</code>。同理 <code>5.0 / 2 = 2.5</code></p></blockquote></li><li><p><code>%</code> ：取模（求余数），结果和被取模数同号。其实 <code>a % b == a - (int)a / b * b;</code></p><blockquote><p><code>11 % 9 = 2;</code></p><p><code>-11 % 9 = -2;</code></p><p><code>11 % -9 = 2;</code></p><p><code>-11 % -9 = -2;</code></p></blockquote></li><li><p><code>++</code> ：自增。</p><p><code>++i</code> 先自增后赋值；<code>i++</code> 先赋值后自增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = 10;</span><br><span class="line">int j = ++i; //等价于 i = i + 1; j = i; 此时 i = 10; j = 10`</span><br><span class="line">int k = i++; //等价于 k = i; i = i + 1; 此时 i = 11; k = 10`</span><br><span class="line">i = i++; //系统会先后执行 int temp = i;     i = i + 1;     i = temp</span><br><span class="line">i = ++i; //系统会先后执行 i = i + 1;     int temp = i;     i = tempJAVA</span><br></pre></td></tr></table></figure></li><li><p><code>--</code> ：自减。和 <code>++</code> 同理。</p></li><li><p><code>+</code> ：字符串相加</p></li></ul><h2 id="3-2-关系运算符（比较运算符）"><a href="#3-2-关系运算符（比较运算符）" class="headerlink" title="3.2 关系运算符（比较运算符）"></a>3.2 关系运算符（比较运算符）</h2><blockquote><p>关系运算符结果都为 <code>boolean</code> 型，要么是 <code>ture</code> 要么是 <code>false</code>。其关系表达式经常用在 <code>if</code> 结构的条件中或循环结构的条件中。</p></blockquote><ul><li><code>==</code> ：相等于。<code>8 == 7</code> 结果 <code>false</code></li><li><code>!=</code> ：不等于</li><li><code>&lt;</code> <code>&gt;</code> ：小于、大于</li><li><code>&lt;=</code> <code>&gt;=</code> ：小于等于、大于等于</li><li><code>instanceof</code> ：检查是否是类的对象。<code>&quot;a&quot; istanceof String</code> 结果 <code>ture</code></li></ul><h3 id="3-2-1-使用细节"><a href="#3-2-1-使用细节" class="headerlink" title="3.2.1 使用细节"></a>3.2.1 使用细节</h3><ol><li>关系运算符结果都是 <code>boolean</code> 型，要么是 <code>ture</code> ，要么是 <code>false</code></li><li>关系运算符的表达式，称为<em>关系表达式</em></li><li>比较运算符 <code>==</code> 不要误写为 <code>=</code></li><li>Java 允许将 <code>==</code>、<code>!=</code> 两种运算用于任何数据类型</li></ol><h2 id="3-3-逻辑运算符"><a href="#3-3-逻辑运算符" class="headerlink" title="3.3 逻辑运算符"></a>3.3 逻辑运算符</h2><blockquote><p>用于连接多个条件（多个关系表达式），最终的结果也是一个 <code>boolean</code> 值。</p></blockquote><ul><li><p><code>&amp;&amp;</code> ：短路与。<code>a</code> <code>b</code> 同时为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p></li><li><p><code>&amp;</code> ：逻辑与。<code>a</code> <code>b</code> 同时为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p><p><code>&amp;&amp;</code> 与 <code>&amp;</code> 的区别，在于 <code>a &amp;&amp; b</code> 的场合，<code>a = false</code> 时，则 <code>b</code> 不判断。而 <code>&amp;</code> 会完成判断。开发中多用 <code>&amp;&amp;</code> ，因为其效率更高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int b = 1;</span><br><span class="line"></span><br><span class="line">if (a++ &gt; 1 &amp;&amp; ++b &lt; 1) System.out.println(&quot;Nothing happened&quot;);</span><br><span class="line">/*</span><br><span class="line">此时 a 经历了先判断后自增，返回 false 并且 a = 2</span><br><span class="line">但此时 b = 1; 因为 a = false; 所以 ++b 不执行。</span><br><span class="line">*/JAVA</span><br></pre></td></tr></table></figure></li><li><p><code>||</code> ：短路或。<code>a</code> <code>b</code> 任一为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p></li><li><p><code>|</code> ：逻辑或。<code>a</code> <code>b</code> 任一为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p><blockquote><p>两者的区别和<code>&amp;&amp;</code> 与 <code>&amp;</code> 相似，若第一个为 <code>ture</code> ，则 <code>||</code> 不会判断第二个。</p></blockquote></li><li><p><code>!</code> ：取反。<code>a</code> 为 <code>ture</code>，则结果为 <code>false</code>。反之为 <code>ture</code>。</p></li><li><p><code>^</code>：逻辑异或。<code>a</code> <code>b</code> 不同时，结果为 <code>ture</code>，否则为 <code>false</code>。</p></li></ul><h2 id="3-4-赋值运算符"><a href="#3-4-赋值运算符" class="headerlink" title="3.4 赋值运算符"></a>3.4 赋值运算符</h2><blockquote><p>将某个运算后的值，赋给指定变量</p></blockquote><ul><li><p>基本赋值运算符：<code>=</code></p></li><li><p>符合赋值运算符：<code>+=</code> ; <code>-=</code> ; <code>*=</code> ; <code>/=</code> ; <code>%=</code> 等</p><blockquote><p><code>a += b</code> 等价于 <code>a = a + b</code>。其余同理。</p></blockquote></li></ul><h3 id="3-4-1-使用细节"><a href="#3-4-1-使用细节" class="headerlink" title="3.4.1 使用细节"></a>3.4.1 使用细节</h3><ol><li><p>运算顺序从右往左。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> a + b + c;<span class="comment">// 先运行(a + b + c)，再结算int num =</span></span><br></pre></td></tr></table></figure></li><li><p>运算符左边只能是变量，右边可以是变量、表达式、常量值。</p></li><li><p>复合赋值运算符会进行类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>; b += <span class="number">3</span>;<span class="comment">// 此时 b += 3 等价于 b = (byte)(b + 3)</span></span><br><span class="line">b++;<span class="comment">// 同理</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-5-三元运算符"><a href="#3-5-三元运算符" class="headerlink" title="3.5 三元运算符"></a>3.5 三元运算符</h2><blockquote><p>基本语法：<code>条件表达式 ? 表达式1 : 表达式2;</code></p><p>运算规则：如果条件表达式为 <code>ture</code> ，运算的结果是表达式1；反之为表达式2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> (a == b ? a++ : b++);<span class="comment">// 此时 a = 10  result = 11  b = 12</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3-5-1-使用细节"><a href="#3-5-1-使用细节" class="headerlink" title="3.5.1 使用细节"></a>3.5.1 使用细节</h3><ol><li><p>表达式1 和 表达式2 要为可以赋给接受变量的类型（或可以自动转换，或进行强制转换）</p></li><li><p>三元运算符可以转成 <code>if--else</code></p></li><li><p>三元运算符是一个整体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.2</span>);</span><br><span class="line">System.out.print(obj)</span><br></pre></td></tr></table></figure><p>上例中，系统将会输出 <code>1.0</code></p><p>因为 三元运算符 是一个整体，所以根据 [2.8.1.1.1] 发生了类型转换。</p></li></ol><h2 id="3-6-运算符优先级"><a href="#3-6-运算符优先级" class="headerlink" title="3.6 运算符优先级"></a>3.6 运算符优先级</h2><p><a href="http://c.biancheng.net/view/794.html">一个网页，可以查看详细优先级</a></p><table><thead><tr><th>运算符（优先级从高到低）</th><th>结核性</th></tr></thead><tbody><tr><td><code>[]</code>、<code>()</code> 方法调用</td><td>从左向右</td></tr><tr><td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code>、<code>+</code>（一元运算）、<code>-</code>（一元运算）、强制类型转换、new</td><td>从右向左</td></tr><tr><td><code>*</code>、<code>/</code>、<code>%</code></td><td>从左向右</td></tr><tr><td><code>+</code>、<code>-</code></td><td>从左向右</td></tr><tr><td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td><td>从左向右</td></tr><tr><td><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、instanceof</td><td>从左向右</td></tr><tr><td><code>==</code>、<code>!=</code></td><td>从左向右</td></tr><tr><td><code>&amp;</code></td><td>从左向右</td></tr><tr><td><code>^</code></td><td>从左向右</td></tr><tr><td>&#96;</td><td>&#96;</td></tr><tr><td><code>&amp;&amp;</code></td><td>从左向右</td></tr><tr><td>&#96;</td><td></td></tr><tr><td><code>?:</code>（三元运算符）</td><td>从右向左</td></tr><tr><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>&amp;=</code>、<code>%=</code>、<code>^=</code>、&#96;</td><td>&#x3D;<code>、</code>&lt;&lt;&#x3D;<code>、</code>&gt;&gt;&#x3D;<code>、</code>&gt;&gt;&gt;&#x3D;&#96;</td></tr></tbody></table><ol><li>运算符有不同优先级。优先级高的总是优先于低的。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li></ol><h2 id="3-7-标识符"><a href="#3-7-标识符" class="headerlink" title="3.7 标识符"></a>3.7 标识符</h2><blockquote><p>Java 对各种变量、方法和类等命名时使用的字符序列称为标识符</p><p>凡是自己可以起名字的地方都叫标识符 <code>double height = 0.0;</code></p></blockquote><h3 id="3-7-1-命名规则"><a href="#3-7-1-命名规则" class="headerlink" title="3.7.1 命名规则"></a>3.7.1 命名规则</h3><ol><li><p>标识符由 26 个大、小写英文字母，0 - 9 阿拉伯数字，_ 或 $ 符号组成。</p></li><li><p><strong>数字不能开头</strong>。 错误示范：<code>int 3a = 1;</code></p></li><li><p>不能使用关键字和保留字（可以包含）。[具体的关键字和保留字请自行查询](<a href="https://i-melody.github.io/2021/11/23/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/3">https://i-melody.github.io/2021/11/23/Java/入门阶段/3</a> 运算符&#x2F;<a href="http://www.baidu.com/">www.baidu.com</a>)</p></li><li><p>严格区分大小写，长度无限制。</p></li><li><p>不能包含空格。</p></li><li><p>与多数编程语言不同。Java 可以用任何 Unicode 字符（特殊字符除外）作为标识符。但不推荐这么做</p><blockquote><p><strong>来 String 一只猫：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ᓚᘏᗢ = <span class="string">&quot;✪ ω ✪&quot;</span>;<span class="comment">// 喵？</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-7-2-命名规范"><a href="#3-7-2-命名规范" class="headerlink" title="3.7.2 命名规范"></a>3.7.2 命名规范</h3><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc</li><li>类名、接口名：多单词组成时，采用大驼峰法，所有单词的首字母大写：XxxYyyZzz</li><li>变量名、方法名：多单词组成时，采小驼峰法（驼峰法），第一个单词首字母小写，第二个开始每个单词首字母大写：xxxYyyZzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li><li>更详细的规则查看 <a href="https://developer.aliyun.com/article/709470">Java 编码规范</a></li></ol><h2 id="3-8-输入与输出"><a href="#3-8-输入与输出" class="headerlink" title="3.8 输入与输出"></a>3.8 输入与输出</h2><blockquote><p>为满足读取用户输入、输出的需求，Java 提供了几个基本类</p></blockquote><h3 id="3-8-1-Scanner-类"><a href="#3-8-1-Scanner-类" class="headerlink" title="3.8.1 Scanner 类"></a>3.8.1 Scanner 类</h3><blockquote><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。</p><p><code>Input.java</code> ，需要一个 扫描器（对象），就是 Scanner</p><p>Scanner 属于 java.util 包。其包含许多方法</p></blockquote><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;//[1] 导入</span><br><span class="line"></span><br><span class="line">    public class Code3_8_1&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner aScannerName = new Scanner(System.in);//[2] 创建 Scanner 对象</span><br><span class="line">        System.out.println(&quot;\n输入点什么吧！&quot;);</span><br><span class="line">        String pointSomething = aScannerName.next();//[3] 接收用户输入</span><br><span class="line">        System.out.println(&quot;\n接下来，输入一个数字吧！&quot;);</span><br><span class="line">        double aNumber = aScannerName.nextDouble();//[3] 接收用户输入</span><br><span class="line">        System.out.println(&quot;\n你输入的\&quot;点什么\&quot;是:\&quot;&quot; </span><br><span class="line">        + pointSomething + &quot;\&quot;\n你输入的\&quot;一个数字\&quot;是：\&quot;&quot; </span><br><span class="line">        + aNumber + &quot;\&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;JAVA</span><br></pre></td></tr></table></figure><blockquote><ol><li>导入该类所在的包</li><li>创建该类对象（声明变量）</li><li>调用里面的功能，接收用户输入</li></ol></blockquote><p>构造方法：</p><ul><li><p><code>new Scanner(System.in)</code>：该方法接收一个参数（输入源）。其中 <code>System.in</code> 代表标准输入流。默认情况指键盘。</p><p><em><strong>—— 见 [[17.2.3.4 标准输入 &#x2F; 输出流]](<a href="https://i-melody.github.io/2022/01/06/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/17">https://i-melody.github.io/2022/01/06/Java/入门阶段/17</a> IO流&#x2F;#17-2-3-4-标准输入-x2F-输出流)</strong></em></p></li></ul><p>常用方法：</p><ul><li><p><code>String next()</code>：读取下一个输入对象</p><p>Scanner 对象用空白（空格、水平制表符或回车换行符）作为输入的分隔元素</p></li><li><p><code>Double nextDouble()</code>：读取下一个 double</p><p><code>Int nextInt()</code>：读取下一个 int</p></li><li><p><code>String nextLine()</code>：读入当前行的所有输入，直到行尾</p></li><li><p><code>boolean hasNext()</code>：输入中是否还有其他单词</p><p><code>boolean hasNextInt()</code>、<code>boolean hasNextDouble()</code></p></li></ul><h3 id="3-8-2-格式化输出"><a href="#3-8-2-格式化输出" class="headerlink" title="3.8.2 格式化输出"></a>3.8.2 格式化输出</h3><blockquote><p>System.out 标准输出流。调用该流方法以输出内容至控制台窗口</p></blockquote><ul><li><p><code>println(String s)</code>：输出字符，结束后换行</p><p><code>print(String s)</code>：输出字符，结束后不换行</p><p><code>println(int n)</code>、<code>println(char c)</code>、<code>println(Object obj)</code>……</p></li><li><p><code>printf(String format, Object ... args)</code>：格式化输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%s，你来啦，给你 %d 拳&quot;</span>, <span class="string">&quot;柏枝凪斗&quot;</span>, <span class="number">1</span>);<span class="comment">// &lt;———— 给了柏枝凪斗一拳</span></span><br></pre></td></tr></table></figure><p>以 % 开头的 <em>格式说明符</em> 都用相应参数替换。格式说明符尾部的转换符表示要格式化的数值类型</p><table><thead><tr><th>转换符</th><th>类型</th><th align="center"></th><th>转换符</th><th>类型</th></tr></thead><tbody><tr><td>d</td><td>十进制整数</td><td align="center"></td><td>s</td><td>字符串</td></tr><tr><td>x</td><td>十六进制整数</td><td align="center"></td><td>c</td><td>字符</td></tr><tr><td>o</td><td>八进制整数</td><td align="center"></td><td>b</td><td>布尔值</td></tr><tr><td>f</td><td>定点浮点数</td><td align="center"></td><td>h</td><td>散列码</td></tr><tr><td>e</td><td>指数浮点数</td><td align="center"></td><td>tx 或 Tx</td><td>日期时间（T强制大写）</td></tr><tr><td>g</td><td>通用浮点数</td><td align="center"></td><td>%</td><td>百分号</td></tr><tr><td>a</td><td>十六进制浮点数</td><td align="center"></td><td>n</td><td>行分隔符</td></tr></tbody></table><p>也能指定控制格式化输出外观的各种标志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;% (4.12f&quot;</span>, Math.PI);<span class="comment">// &lt;————— 保留 12 位，正数添加空格，负数添加括号</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>标志</th><th>目的</th></tr></thead><tbody><tr><td>+</td><td>打印正数和负数的符号</td></tr><tr><td>（空格）</td><td>在正数前添加空格</td></tr><tr><td>0</td><td>数字前面补 0</td></tr><tr><td>-</td><td>左对齐</td></tr><tr><td>(</td><td>负号被括号环绕</td></tr><tr><td>,</td><td>添加分组分隔符</td></tr><tr><td>#（对于 f 格式）</td><td>包含小数点</td></tr><tr><td>#（对于 x 或 0 格式）</td><td>添加前缀 0x 或 0</td></tr><tr><td>$</td><td>指定要格式化的参数索引：%1$d 以十进制打印第 1 个参数</td></tr><tr><td>&lt;</td><td>格式化前面说明的数值：%d%&lt;x 十进制打印后，再以十六进制打印一遍</td></tr></tbody></table></li></ul><h3 id="3-8-3-NumberFormat-类"><a href="#3-8-3-NumberFormat-类" class="headerlink" title="3.8.3 NumberFormat 类"></a>3.8.3 NumberFormat 类</h3><blockquote><p>Java 提供的格式化输出功能，能使打印或显示是信息更美观</p><p>NumberFormat 类属于 Java 标准类库，在 java.text 包中</p><p>NumberFormat 类不能直接创建对象。利用类中的静态方法获取一个对象实例</p></blockquote><p>获取实例：</p><ul><li><code>NumberFormat.getInstance()</code>：返回当前默认语言环境的默认数值格式</li><li><code>NumberFormat.getCurrnecyInstance()</code>：返回当前默认语言环境的通用格式</li><li><code>NumberFormat.getNumberInstance()</code>：返回当前默认语言环境的通用数值格式</li><li><code>NumberFormat.getPercentInstance()</code>：返回当前默认语言环境的百分比格式</li></ul><p>常用方法：</p><ul><li><p><code>format(num)</code>：获取 num 的格式化语句</p></li><li><p><code>setMaximunFactionDigits(n)</code>：将该格式的小数部分允许的最大位数设置为 n</p><p><code>setMinimunFactionDigits(n)</code>：将该格式的小数部分允许的最小位数设置为 n</p></li><li><p><code>setMaximunIntegerDigits(n)</code>：将该格式的整数部分允许的最大位数设置为 n</p><p><code>setMinimunIntegerDigits(n)</code>：将该格式的整数部分允许的最小位数设置为 n</p></li></ul><h3 id="3-8-4-DecimalFormat-类"><a href="#3-8-4-DecimalFormat-类" class="headerlink" title="3.8.4 DecimalFormat 类"></a>3.8.4 DecimalFormat 类</h3><blockquote><p>与 NumberFormat 类不同，DecimalFormat 类可以直接实例化对象。</p></blockquote><p>实例化：</p><ul><li><p><code>new DecimalFormat(pattern)</code></p><p>其中 pattern 是一个 String，代表格式化处理模式。如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DecimalFormat df = new DecimalFormat(&quot;0.###&quot;);//格式对象，保留 3 位小数</span><br><span class="line">JAVA</span><br></pre></td></tr></table></figure></li></ul><p>常用方法：</p><ul><li><code>format(num)</code>：获取 num 的格式化语句</li><li><code>applyPattern(pattern)</code>：变更要使用的格式</li></ul><h2 id="3-9-进制"><a href="#3-9-进制" class="headerlink" title="3.9 进制"></a>3.9 进制</h2><ul><li>二进制：数字有 0 - 1，满 2 进 1，以 <code>0b</code> 或 <code>0B</code> 开头</li><li>十进制</li><li>八进制：0 - 7，满 8 进 1，以 <code>0</code> 开头表示</li><li>十六进制：0 - 9 及 A - F，满 16 进 1，以<code>0x</code> 或 <code>0X</code> 开头。此处的 A - F 不分大小写。</li></ul><h3 id="3-9-1-进制的转换"><a href="#3-9-1-进制的转换" class="headerlink" title="3.9.1 进制的转换"></a>3.9.1 进制的转换</h3><ul><li>其他进制 转 十进制：略</li><li>十进制 转 其他进制：将该数不断除以对象进制数，直到商为0为止，将每步得到的余数倒过来。</li><li>二进制 与 八进制 或 十六进制 互相转换：二进制 从低位开始，每 3 位一组，转成对应的 八进制 即可。反之同理。十六进制亦同理（每 4 位一组）。</li></ul><h3 id="3-9-2-原码、反码、补码"><a href="#3-9-2-原码、反码、补码" class="headerlink" title="3.9.2 原码、反码、补码"></a>3.9.2 原码、反码、补码</h3><p>对于有符号数而言：</p><ol><li>二进制的最高位是符号位：0表示正数，1表示负数。</li><li>正数的原码、反码、补码都一样。</li><li>负数的反码 &#x3D; 原码符号位不变，其他位取反（0 变 1，1 变 0）</li><li><strong>负数的补码 &#x3D; 反码 + 1。也就是说，负数的反码 &#x3D; 补码 - 1。</strong></li><li>0 的反码、补码都是 0。</li><li>Java 没有无符号数。换言之，Java 的数都是有符号的。</li><li><strong>计算机运算时，都是以补码的方式来运算的。</strong></li><li><strong>当我们看运算结果时，要看其原码。</strong></li></ol><h2 id="3-10-位运算符"><a href="#3-10-位运算符" class="headerlink" title="3.10 位运算符"></a>3.10 位运算符</h2><ul><li><p><code>&amp;</code> 按位与：两位都为 1，结果为 1，否则为 0</p></li><li><p><code>|</code> 按位或：两位有一个为 1，结果为 1，否则为 0</p></li><li><p><code>^</code> 按位异或：两位不同，结果为 1，否则为 0</p></li><li><p><code>~</code> 按位取反：把 0 变 1，1 变 0</p><p>以下是几个示例：</p><ul><li><p><code>2 &amp; 3</code>：</p><blockquote><p>2 的原码：00000000 00000000 00000000 00000010</p><p>2 的补码：00000000 00000000 00000000 00000010</p><p>3 的原码：00000000 00000000 00000000 00000011</p><p>3 的补码：00000000 00000000 00000000 00000011</p><p>补码运算结果：00000000 00000000 00000000 00000010</p><p>结果转成原码：00000000 00000000 00000000 00000010</p><p>运算结果：2</p></blockquote></li><li><p><code>~-2</code>：</p><blockquote><p>得到 -2 的原码：10000000 00000000 00000000 00000010</p><p>得到 -2 的反码：11111111 11111111 11111111 11111101</p><p>得到 -2 的补码：11111111 11111111 11111111 11111110</p><p>补码运算结果：00000000 00000000 00000000 00000001</p><p>结果转成原码：00000000 00000000 00000000 00000001</p><p>运算结果：1</p></blockquote></li><li><p><code>~2</code>：</p><blockquote><p>2 的原码：00000000 00000000 00000000 00000010</p><p>2 的补码：00000000 00000000 00000000 00000010</p><p>补码运算：11111111 11111111 11111111 11111101</p><p>结果转成反码：11111111 11111111 11111111 11111100</p><p>反码转成原码：10000000 00000000 00000000 00000011</p><p>运算结果：-3</p></blockquote></li></ul></li><li><p><code>&gt;&gt;</code> 算术右移：低位溢出，符号位不变，用符号位补溢出的高位</p></li><li><p><code>&lt;&lt;</code> 算数左移：符号位不变，低位补 0</p></li><li><p><code>&gt;&gt;&gt;</code> 逻辑右移（无符号右移）：低位溢出，高位补 0</p><p>下面是示例：</p><ul><li><p>将数字 1 算术右移 2 位：<code>int a = 1 &gt;&gt; 2</code></p><blockquote><p>1 的补码：00000000 00000000 00000000 00000001</p><p>补码结果：00000000 00000000 00000000 00000000</p><p>结果：00000000 00000000 00000000 00000000</p></blockquote></li><li><p>将数字 1 算术左移 2 位：<code>int b = 1 &lt;&lt; 2</code></p><blockquote><p>1 的补码：00000000 00000000 00000000 00000001</p><p>补码结果：00000000 00000000 00000000 00000100</p><p>结果：00000000 00000000 00000000 00000100</p></blockquote></li></ul><p>也就是说，<code>1 &lt;&lt; 2</code> 本质是 <code>1 * 2 * 2 = 4</code></p><p>而 <code>1 &gt;&gt; 2</code> 本质是 <code>1 / 2 / 2 = 0</code></p></li></ul><p><strong>使用细节：</strong></p><ol><li><p>位运算符只对整型、字符类型有效</p></li><li><p>移位运算中，左侧操作 int 的场合，右侧操作数以 32 取模；long 的场合，右侧操作数以 64 取模。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int n = 20;</span><br><span class="line">n &gt;&gt;= 32;//这个场合，n 不改变。这样能保证左侧数字不被全部移走JAVA</span><br></pre></td></tr></table></figure></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Java-API-文档"><a href="#Java-API-文档" class="headerlink" title="Java API 文档"></a>Java API 文档</h3><blockquote><p>API：Application Programming Iterface（应用程序编程接口），是 Java 提供的基本编程接口（Java 提供的一些类和方法）。</p><p>Java 语言提供了大量基础类，为了告诉开发者如何使用这些类，及类里包含的方法，就有了API文档。[具体有哪些请查找](<a href="https://i-melody.github.io/2021/11/23/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/3">https://i-melody.github.io/2021/11/23/Java/入门阶段/3</a> 运算符&#x2F;<a href="http://www.matools.com)；[特别地，Java">www.matools.com)；[特别地，Java</a> 8 请查找](<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a>)</p></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="#使用方法"></a>#使用方法</h4><ul><li>包 —— 类 &#x2F; 接口 —— 方法</li><li>直接检索</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;变量：变量是程序的基本组成单位&lt;/p&gt;
&lt;p&gt;变量的三个基本要素：类型 + 名称 + 值&lt;/p&gt;
&lt;p&gt;示例：&lt;c</summary>
      
    
    
    
    
  </entry>
  
</feed>
